To declare an array with more
than two dimensions, you just specify as many sets of empty brackets as you need.
For example:

> int[][][] threeD = new int[3][3][3];

Here a three-dimensional array is created, with each dimension having three elements.
You can think of this array as a cube. Each element requires three indexes
to access.

You can access an element in a multidimensional array by specifying as many
indexes as the array needs. For example:

> threeD[0][1][2] = 100;

This statement sets element 2 in column 1 of row 0 to 100.

You can nest initializers as deep as necessary, too. For example:

> int[][][] threeD =
  { { {1, 2, 3}, { 4, 5, 6}, { 7, 8, 9} },
  { {10, 11, 12}, {13, 14, 15}, {16, 17, 18} },
  { {19, 20, 21}, {22, 23, 24}, {25, 26, 27} } };

Here a three-dimensional array is initialized with the numbers 1 through 27.

You can also use multiple nested if statements to process an array with three or
more dimensions. Hereâ€™s another way to initialize a three-dimensional array with
the numbers 1 to 27:

> int[][][] threeD2 = new int[3][3][3];
    int value = 1;
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                for (int k = 0; k < 3; k++)
                    threeD2[i][j][k] = value++;